// lib/widgets/social/social_post_card.dart
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../models/social_post.dart';
import '../../theme/app_theme.dart';
import '../common/lottie_loading_widget.dart';
import '../../screens/social/post_comments_screen.dart';
import '../../screens/social/edit_post_screen.dart';
import '../media/enhanced_video_player.dart';
import '../../screens/media/full_screen_video_player.dart';
import 'mention_rich_text.dart';
import 'report_content_dialog.dart';

class SocialPostCard extends StatefulWidget {
  final SocialPost post;
  final Function(String postId, ReactionType reaction)? onReaction;
  final Function(String postId)? onComment;
  final Function(String postId)? onShare;
  final Function(String postId)? onMoreOptions;

  const SocialPostCard({
    super.key,
    required this.post,
    this.onReaction,
    this.onComment,
    this.onShare,
    this.onMoreOptions,
  });

  @override
  State<SocialPostCard> createState() => _SocialPostCardState();
}

class _SocialPostCardState extends State<SocialPostCard> {
  PageController? _mediaPageController;
  int _currentMediaIndex = 0;
  // TODO: Video controllers for enhanced video handling

  @override
  void initState() {
    super.initState();
    if (widget.post.hasMedia) {
      _mediaPageController = PageController();
      _initializeVideoControllers();
    }
  }

  void _initializeVideoControllers() {
    // TODO: Initialize video controllers for enhanced video handling
  }

  @override
  void dispose() {
    _mediaPageController?.dispose();
    // TODO: Dispose video controllers
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        color: AppTheme.cardColor(context),
        borderRadius: BorderRadius.zero, // Edge-to-edge design
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha(13),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildPostHeader(),
          if (widget.post.content.isNotEmpty) _buildPostContent(),
          if (widget.post.hasMedia) _buildMediaSection(),
          _buildPostActions(),
          _buildPostStats(),
        ],
      ),
    );
  }

  Widget _buildPostHeader() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          // User Avatar
          CircleAvatar(
            radius: 22,
            backgroundImage: widget.post.userAvatarUrl != null
                ? CachedNetworkImageProvider(widget.post.userAvatarUrl!)
                : null,
            backgroundColor: AppTheme.textFieldBackground(context),
            child: widget.post.userAvatarUrl == null
                ? Icon(
                    Icons.person,
                    color: AppTheme.textColor(context).withAlpha(128),
                    size: 24,
                  )
                : null,
          ),
          const SizedBox(width: 12),
          // User Info and Post Meta
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      widget.post.userName,
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: AppTheme.textColor(context),
                      ),
                    ),
                    if (widget.post.autoGenerated) ...[
                      const SizedBox(width: 6),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 6,
                          vertical: 2,
                        ),
                        decoration: BoxDecoration(
                          color: Theme.of(context).primaryColor.withAlpha(51),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          'AUTO',
                          style: TextStyle(
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
                const SizedBox(height: 2),
                Row(
                  children: [
                    Text(
                      _formatTimestamp(widget.post.timestamp),
                      style: TextStyle(
                        fontSize: 12,
                        color: AppTheme.textColor(context).withAlpha(153),
                      ),
                    ),
                    if (widget.post.pillars.isNotEmpty) ...[
                      const SizedBox(width: 8),
                      Text(
                        'â€¢',
                        style: TextStyle(
                          color: AppTheme.textColor(context).withAlpha(153),
                        ),
                      ),
                      const SizedBox(width: 8),
                      _buildPillarTags(),
                    ],
                    // Privacy indicator
                    const SizedBox(width: 8),
                    Icon(
                      _getVisibilityIcon(widget.post.visibility),
                      size: 14,
                      color: AppTheme.textColor(context).withAlpha(128),
                    ),
                  ],
                ),
              ],
            ),
          ),
          // More options button
          IconButton(
            onPressed: () => _showMoreOptions(),
            icon: Icon(
              Icons.more_horiz,
              color: AppTheme.textColor(context).withAlpha(153),
            ),
            padding: EdgeInsets.zero,
            constraints: const BoxConstraints(minWidth: 32, minHeight: 32),
          ),
        ],
      ),
    );
  }

  Widget _buildPillarTags() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: widget.post.pillars.take(2).map((pillar) {
        return Container(
          margin: const EdgeInsets.only(right: 4),
          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
          decoration: BoxDecoration(
            color: _getPillarColor(pillar).withAlpha(51),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Text(
            _getPillarDisplayName(pillar),
            style: TextStyle(
              fontSize: 10,
              fontWeight: FontWeight.w600,
              color: _getPillarColor(pillar),
            ),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildPostContent() {
    // Parse mentions from the post content
    final mentions = MentionUtils.parseMentions(widget.post.content);
    
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: MentionRichText(
        text: widget.post.content,
        mentions: mentions,
        baseStyle: TextStyle(
          fontSize: 16,
          height: 1.4,
          color: AppTheme.textColor(context),
        ),
        mentionStyle: TextStyle(
          fontSize: 16,
          height: 1.4,
          color: Theme.of(context).primaryColor,
          fontWeight: FontWeight.w600,
        ),
        onMentionTap: (mention) {
          // TODO: Navigate to user profile
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Tapped on ${mention.displayName}'),
              duration: const Duration(seconds: 1),
            ),
          );
        },
      ),
    );
  }

  Widget _buildMediaSection() {
    final allMedia = [
      ...widget.post.mediaUrls.map((url) => MediaItem(url: url, isVideo: false)),
      ...widget.post.videoUrls.map((url) => MediaItem(url: url, isVideo: true)),
    ];

    if (allMedia.isEmpty) return const SizedBox.shrink();

    return Container(
      margin: const EdgeInsets.only(top: 12),
      height: 400, // Instagram-style fixed height
      child: Stack(
        children: [
          PageView.builder(
            controller: _mediaPageController,
            onPageChanged: (index) {
              setState(() {
                _currentMediaIndex = index;
              });
            },
            itemCount: allMedia.length,
            itemBuilder: (context, index) {
              final media = allMedia[index];
              return _buildMediaItem(media, index);
            },
          ),
          // Media indicators
          if (allMedia.length > 1) _buildMediaIndicators(allMedia.length),
          // Media counter
          if (allMedia.length > 1) _buildMediaCounter(allMedia.length),
        ],
      ),
    );
  }

  Widget _buildMediaItem(MediaItem media, int index) {
    if (media.isVideo) {
      // Use enhanced video player for videos
      return EnhancedVideoPlayer(
        videoUrl: media.url,
        width: double.infinity,
        height: 400,
        autoPlay: false,
        showControls: true,
        showDuration: true,
        onVideoTap: () {
          // Handle video tap - could open full screen player
          _showFullScreenVideo(media.url);
        },
      );
    }

    return CachedNetworkImage(
      imageUrl: media.url,
      fit: BoxFit.cover,
      width: double.infinity,
      placeholder: (context, url) => Container(
        color: AppTheme.cardColor(context),
        child: const Center(
          child: LottieLoadingWidget(width: 60, height: 60),
        ),
      ),
      errorWidget: (context, url, error) => Container(
        color: Colors.grey[300],
        child: const Center(
          child: Icon(Icons.error, size: 48, color: Colors.grey),
        ),
      ),
    );
  }

  // TODO: Build video player widget when needed

  Widget _buildMediaIndicators(int mediaCount) {
    return Positioned(
      bottom: 16,
      left: 0,
      right: 0,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: List.generate(mediaCount, (index) {
          return Container(
            margin: const EdgeInsets.symmetric(horizontal: 3),
            width: 6,
            height: 6,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: _currentMediaIndex == index
                  ? Colors.white
                  : Colors.white.withAlpha(128),
            ),
          );
        }),
      ),
    );
  }

  Widget _buildMediaCounter(int mediaCount) {
    return Positioned(
      top: 16,
      right: 16,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: Colors.black.withAlpha(153),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Text(
          '${_currentMediaIndex + 1}/$mediaCount',
          style: const TextStyle(
            color: Colors.white,
            fontSize: 12,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Widget _buildPostActions() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Row(
        children: [
          // Like button
          _buildActionButton(
            icon: Icons.favorite_border,
            activeIcon: Icons.favorite,
            isActive: false, // TODO: Check if user has reacted
            onTap: () => widget.onReaction?.call(widget.post.id, ReactionType.like),
          ),
          const SizedBox(width: 16),
          // Celebrate button
          _buildActionButton(
            icon: Icons.celebration_outlined,
            activeIcon: Icons.celebration,
            isActive: false,
            onTap: () => widget.onReaction?.call(widget.post.id, ReactionType.celebrate),
          ),
          const SizedBox(width: 16),
          // Boost button (SolarVita unique)
          _buildActionButton(
            icon: Icons.eco_outlined,
            activeIcon: Icons.eco,
            isActive: false,
            onTap: () => widget.onReaction?.call(widget.post.id, ReactionType.boost),
          ),
          const SizedBox(width: 16),
          // Comment button
          _buildActionButton(
            icon: Icons.chat_bubble_outline,
            activeIcon: Icons.chat_bubble_outline,
            isActive: false,
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => PostCommentsScreen(post: widget.post),
                ),
              );
            },
          ),
          const Spacer(),
          // Share button
          _buildActionButton(
            icon: Icons.share_outlined,
            activeIcon: Icons.share_outlined,
            isActive: false,
            onTap: () => widget.onShare?.call(widget.post.id),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton({
    required IconData icon,
    required IconData activeIcon,
    required bool isActive,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(8),
        child: Icon(
          isActive ? activeIcon : icon,
          size: 24,
          color: isActive
              ? Theme.of(context).primaryColor
              : AppTheme.textColor(context).withAlpha(153),
        ),
      ),
    );
  }

  Widget _buildPostStats() {
    if (widget.post.totalReactions == 0 && widget.post.commentCount == 0) {
      return const SizedBox.shrink();
    }

    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 4, 16, 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (widget.post.totalReactions > 0) _buildReactionStats(),
          if (widget.post.commentCount > 0) ...[
            const SizedBox(height: 4),
            _buildCommentStats(),
          ],
        ],
      ),
    );
  }

  Widget _buildReactionStats() {
    return Text(
      widget.post.totalReactions == 1
          ? '1 reaction'
          : '${widget.post.totalReactions} reactions',
      style: TextStyle(
        fontSize: 14,
        fontWeight: FontWeight.w600,
        color: AppTheme.textColor(context),
      ),
    );
  }

  Widget _buildCommentStats() {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PostCommentsScreen(post: widget.post),
          ),
        );
      },
      child: Text(
        widget.post.commentCount == 1
            ? 'View 1 comment'
            : 'View all ${widget.post.commentCount} comments',
        style: TextStyle(
          fontSize: 14,
          color: AppTheme.textColor(context).withAlpha(153),
        ),
      ),
    );
  }

  String _formatTimestamp(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);

    if (difference.inDays > 7) {
      return '${timestamp.day}/${timestamp.month}/${timestamp.year}';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}d ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m ago';
    } else {
      return 'Just now';
    }
  }

  IconData _getVisibilityIcon(PostVisibility visibility) {
    switch (visibility) {
      case PostVisibility.public:
        return Icons.public;
      case PostVisibility.supporters:
        return Icons.people;
      case PostVisibility.private:
        return Icons.lock;
    }
  }

  void _showMoreOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: AppTheme.cardColor(context),
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildOptionTile(
              icon: Icons.edit,
              title: 'Edit Post',
              subtitle: 'Make changes to your post',
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => EditPostScreen(post: widget.post),
                  ),
                );
              },
            ),
            _buildOptionTile(
              icon: Icons.history,
              title: 'View History',
              subtitle: 'See all changes made to this post',
              onTap: () {
                Navigator.pop(context);
                // TODO: Navigate to revision history
              },
            ),
            _buildOptionTile(
              icon: Icons.bookmark_border,
              title: 'Save Post',
              subtitle: 'Save this post to your collection',
              onTap: () {
                Navigator.pop(context);
                _handleSavePost();
              },
            ),
            _buildOptionTile(
              icon: Icons.share,
              title: 'Share',
              subtitle: 'Share this post with others',
              onTap: () {
                Navigator.pop(context);
                widget.onShare?.call(widget.post.id);
              },
            ),
            _buildOptionTile(
              icon: Icons.copy,
              title: 'Copy Link',
              subtitle: 'Copy link to this post',
              onTap: () {
                Navigator.pop(context);
                // TODO: Copy link functionality
              },
            ),
            _buildOptionTile(
              icon: Icons.report,
              title: 'Report',
              subtitle: 'Report this post',
              onTap: () {
                Navigator.pop(context);
                _showReportDialog();
              },
            ),
          ],
        ),
      ),
    );
  }

  void _handleSavePost() {
    // TODO: Implement save post functionality with Firebase
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.bookmark, color: Colors.white, size: 20),
            const SizedBox(width: 8),
            const Text('Post saved to your collection!'),
          ],
        ),
        backgroundColor: Theme.of(context).primaryColor,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  Widget _buildOptionTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: AppTheme.textColor(context).withAlpha(26),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(
          icon,
          color: AppTheme.textColor(context),
          size: 20,
        ),
      ),
      title: Text(
        title,
        style: TextStyle(
          color: AppTheme.textColor(context),
          fontWeight: FontWeight.w600,
        ),
      ),
      subtitle: Text(
        subtitle,
        style: TextStyle(
          color: AppTheme.textColor(context).withAlpha(153),
          fontSize: 12,
        ),
      ),
      onTap: onTap,
    );
  }

  void _showFullScreenVideo(String videoUrl) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FullScreenVideoPlayer(videoUrl: videoUrl),
      ),
    );
  }

  void _showReportDialog() {
    showDialog(
      context: context,
      builder: (context) => ReportContentDialog(
        contentId: widget.post.id,
        contentType: 'post',
        contentOwnerId: widget.post.userId,
        contentOwnerName: widget.post.userName,
        onReportSubmitted: (report) {
          // TODO: Submit report to Firebase
          print('Report submitted: ${report.reason}');
        },
      ),
    );
  }

  String _getPillarDisplayName(PostPillar pillar) {
    switch (pillar) {
      case PostPillar.fitness:
        return 'Fitness';
      case PostPillar.nutrition:
        return 'Nutrition';
      case PostPillar.eco:
        return 'Eco';
    }
  }

  Color _getPillarColor(PostPillar pillar) {
    switch (pillar) {
      case PostPillar.fitness:
        return const Color(0xFF2196F3); // Blue
      case PostPillar.nutrition:
        return const Color(0xFF4CAF50); // Green
      case PostPillar.eco:
        return const Color(0xFF8BC34A); // Light Green
    }
  }
}

// Helper class for media handling
class MediaItem {
  final String url;
  final bool isVideo;

  MediaItem({required this.url, required this.isVideo});
}
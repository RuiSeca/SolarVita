import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

enum EcoActivityType {
  transport,
  consumption,
  energy,
  waste,
  food
}

enum TransportActivity {
  walking,
  biking,
  publicTransport,
  carpooling,
  electricVehicle,
  activeTransport,
  sustainableMovement
}

enum ConsumptionActivity {
  reusableBottle,
  reusableBag,
  secondHandClothing,
  repairInsteadOfBuy,
  buyLocal
}

enum EnergyActivity {
  ledBulbs,
  unplugDevices,
  solarPower,
  energyEfficientAppliances,
  naturalLight
}

enum WasteActivity {
  recycling,
  composting,
  reducePackaging,
  donateItems,
  upcycling
}

enum FoodActivity {
  plantBasedMeal,
  localProduce,
  organicFood,
  reduceFoodWaste,
  homeCooking,
  sustainableMeal,
  reduceMeatConsumption
}

class EcoActivity {
  final String id;
  final String userId;
  final EcoActivityType type;
  final String activity; // The specific activity (e.g., "walking", "reusableBottle")
  final double carbonSaved; // kg CO2 saved
  final DateTime date;
  final String? notes;
  final bool autoGenerated; // True if generated from app usage (e.g., meal logging)
  final Map<String, dynamic>? metadata; // Additional data like distance, quantity, etc.

  const EcoActivity({
    required this.id,
    required this.userId,
    required this.type,
    required this.activity,
    required this.carbonSaved,
    required this.date,
    this.notes,
    this.autoGenerated = false,
    this.metadata,
  });

  // Factory constructor from Firestore
  factory EcoActivity.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return EcoActivity(
      id: doc.id,
      userId: data['userId'] ?? '',
      type: EcoActivityType.values.firstWhere(
        (e) => e.toString() == data['type'],
        orElse: () => EcoActivityType.consumption,
      ),
      activity: data['activity'] ?? '',
      carbonSaved: (data['carbonSaved'] ?? 0.0).toDouble(),
      date: (data['date'] as Timestamp).toDate(),
      notes: data['notes'],
      autoGenerated: data['autoGenerated'] ?? false,
      metadata: data['metadata'] != null 
          ? Map<String, dynamic>.from(data['metadata'])
          : null,
    );
  }

  // Convert to Firestore
  Map<String, dynamic> toFirestore() {
    return {
      'userId': userId,
      'type': type.toString(),
      'activity': activity,
      'carbonSaved': carbonSaved,
      'date': Timestamp.fromDate(date),
      'notes': notes,
      'autoGenerated': autoGenerated,
      'metadata': metadata,
    };
  }

  // Get appropriate icon for the activity
  IconData get icon {
    switch (type) {
      case EcoActivityType.transport:
        switch (activity) {
          case 'walking':
            return Icons.directions_walk;
          case 'biking':
            return Icons.directions_bike;
          case 'publicTransport':
            return Icons.directions_bus;
          case 'carpooling':
            return Icons.people;
          case 'electricVehicle':
            return Icons.electric_car;
          case 'activeTransport':
            return Icons.fitness_center;
          case 'sustainableMovement':
            return Icons.eco;
          default:
            return Icons.directions;
        }
      case EcoActivityType.consumption:
        switch (activity) {
          case 'reusableBottle':
            return Icons.water_drop;
          case 'reusableBag':
            return Icons.shopping_bag;
          case 'secondHandClothing':
            return Icons.checkroom;
          case 'repairInsteadOfBuy':
            return Icons.build;
          case 'buyLocal':
            return Icons.store;
          default:
            return Icons.shopping_cart;
        }
      case EcoActivityType.energy:
        switch (activity) {
          case 'ledBulbs':
            return Icons.lightbulb;
          case 'unplugDevices':
            return Icons.power_off;
          case 'solarPower':
            return Icons.solar_power;
          case 'energyEfficientAppliances':
            return Icons.kitchen;
          case 'naturalLight':
            return Icons.wb_sunny;
          default:
            return Icons.bolt;
        }
      case EcoActivityType.waste:
        switch (activity) {
          case 'recycling':
            return Icons.recycling;
          case 'composting':
            return Icons.compost;
          case 'reducePackaging':
            return Icons.inventory_2;
          case 'donateItems':
            return Icons.volunteer_activism;
          case 'upcycling':
            return Icons.auto_fix_high;
          default:
            return Icons.delete_outline;
        }
      case EcoActivityType.food:
        switch (activity) {
          case 'plantBasedMeal':
            return Icons.eco;
          case 'localProduce':
            return Icons.agriculture;
          case 'organicFood':
            return Icons.nature;
          case 'reduceFoodWaste':
            return Icons.food_bank;
          case 'homeCooking':
            return Icons.restaurant;
          case 'sustainableMeal':
            return Icons.eco;
          case 'reduceMeatConsumption':
            return Icons.nature_people;
          default:
            return Icons.restaurant;
        }
    }
  }

  // Get display name for the activity
  String get displayName {
    switch (type) {
      case EcoActivityType.transport:
        switch (activity) {
          case 'walking':
            return 'Walking';
          case 'biking':
            return 'Biking';
          case 'publicTransport':
            return 'Public Transport';
          case 'carpooling':
            return 'Carpooling';
          case 'electricVehicle':
            return 'Electric Vehicle';
          case 'activeTransport':
            return 'Active Transportation';
          case 'sustainableMovement':
            return 'Sustainable Movement';
          default:
            return 'Transportation';
        }
      case EcoActivityType.consumption:
        switch (activity) {
          case 'reusableBottle':
            return 'Reusable Bottle';
          case 'reusableBag':
            return 'Reusable Bag';
          case 'secondHandClothing':
            return 'Second-hand Clothing';
          case 'repairInsteadOfBuy':
            return 'Repair Instead of Buy';
          case 'buyLocal':
            return 'Buy Local';
          default:
            return 'Sustainable Consumption';
        }
      case EcoActivityType.energy:
        switch (activity) {
          case 'ledBulbs':
            return 'LED Bulbs';
          case 'unplugDevices':
            return 'Unplug Devices';
          case 'solarPower':
            return 'Solar Power';
          case 'energyEfficientAppliances':
            return 'Energy Efficient Appliances';
          case 'naturalLight':
            return 'Natural Light';
          default:
            return 'Energy Saving';
        }
      case EcoActivityType.waste:
        switch (activity) {
          case 'recycling':
            return 'Recycling';
          case 'composting':
            return 'Composting';
          case 'reducePackaging':
            return 'Reduce Packaging';
          case 'donateItems':
            return 'Donate Items';
          case 'upcycling':
            return 'Upcycling';
          default:
            return 'Waste Reduction';
        }
      case EcoActivityType.food:
        switch (activity) {
          case 'plantBasedMeal':
            return 'Plant-based Meal';
          case 'localProduce':
            return 'Local Produce';
          case 'organicFood':
            return 'Organic Food';
          case 'reduceFoodWaste':
            return 'Reduce Food Waste';
          case 'homeCooking':
            return 'Home Cooking';
          case 'sustainableMeal':
            return 'Sustainable Meal Choice';
          case 'reduceMeatConsumption':
            return 'Reduced Meat Consumption';
          default:
            return 'Sustainable Food';
        }
    }
  }

  // Copy with method for updates
  EcoActivity copyWith({
    String? id,
    String? userId,
    EcoActivityType? type,
    String? activity,
    double? carbonSaved,
    DateTime? date,
    String? notes,
    bool? autoGenerated,
    Map<String, dynamic>? metadata,
  }) {
    return EcoActivity(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      type: type ?? this.type,
      activity: activity ?? this.activity,
      carbonSaved: carbonSaved ?? this.carbonSaved,
      date: date ?? this.date,
      notes: notes ?? this.notes,
      autoGenerated: autoGenerated ?? this.autoGenerated,
      metadata: metadata ?? this.metadata,
    );
  }
}

// Legacy CarbonActivity for backward compatibility
class CarbonActivity {
  final String nameKey;
  final double co2Saved;
  final IconData icon;
  final DateTime date;

  const CarbonActivity({
    required this.nameKey,
    required this.co2Saved,
    required this.icon,
    required this.date,
  });

  // Convert from EcoActivity
  factory CarbonActivity.fromEcoActivity(EcoActivity eco) {
    return CarbonActivity(
      nameKey: eco.activity,
      co2Saved: eco.carbonSaved,
      icon: eco.icon,
      date: eco.date,
    );
  }
}
